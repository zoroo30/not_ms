#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
// function for interface
COORD coord = {0, 0};
void gotoxy (int x, int y){

    coord.X = x;
    coord.Y = y;

    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
// every player in leader board has name,score
typedef struct{
char player[10];
int score;
}leaderboard;

//top ten only
leaderboard leaders[10]={{"ms",50},{"kk",60},{"zz",70}};
//current players in file
int current=3;
//sort leaderboard
void sorting(leaderboard x[] ,int n){
  int c,d;
  leaderboard swap;
  for (c = 0 ; c < ( n - 1 ); c++)
  {
    for (d = 0 ; d < n - c - 1; d++)
    {
      if (x[d].score < x[d+1].score)
      {
        swap  = x[d];
        x[d]  = x[d+1];
       x[d+1] = swap;
      }
    }
  }
 }
//at every win ,, write the array to the file
void to_file(leaderboard a[], int items, const char * fileName)
{
  FILE* ptr = fopen(fileName,"wb");
  if(! ptr) exit(1); // TODO: better error handling
  fwrite( a, sizeof(leaderboard), items, ptr);
  fclose(ptr);
}
//will be used in main menu to show leader board
void from_file(leaderboard a[], const char * fileName)
{
  FILE* ptr = fopen(fileName,"rb");
  if( !ptr )  exit(1);
  int n = 0;
  for (n=0; !feof(ptr); ++n)
  {
    if ( fread(&a[n],sizeof(leaderboard),1,ptr) != 1) break;
  }

  fclose(ptr);

}

void SetColorAndBackground(int ForgC, int BackC)
{
     WORD wColor = ((BackC & 0x0F) << 4) + (ForgC & 0x0F);
     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), wColor);
     return;
}
//prints leader board
void print_leaderboard(){
    //from_file(leaders,"scores.dat");
    int i;
    SetColorAndBackground(12,0);
   printf("\t\t \xba\xba\xba LEADERBOARD \xba\xba\xba");
   sorting(leaders,3);
  for(i=0;i<10;i++){
    SetColorAndBackground(15,0);
    printf("\n\t\t+ÄÄ %d ÄÄ  ",i+1);
}
for(i=0;i<10;i++){
    SetColorAndBackground(15,0);
    gotoxy(25,1+i);
    printf("%s",leaders[i].player);
    gotoxy(33,1+i);
    printf("%d",leaders[i].score);
}
}
void duplicate(){
int i,j,k;
for(i=0;i<current-1;i++)
    for(j=i+1;j<current;j++)
        if(strcmp(leaders[i].player,leaders[j].player)== 0)
             {
                 for(k=j;k<current;k++)
                 leaders[k]=leaders[k+1];
                 current--;
             }
}
void search_n_replace(leaderboard x){
int i;
for(i=0;i<current;i++){

    if(strcmp(leaders[i].player,x.player)== 0)
        if(leaders[i].score < x.score )
        leaders[i].score = x.score;
}
duplicate();

}
void append(leaderboard x){
FILE* new_file=fopen("new.dat","wb");
fwrite(&x, sizeof(leaderboard), 1, new_file);
FILE* old_file=fopen("scores.dat","ab");
char c = fgetc(old_file);
      while (c != EOF)
      {
            fputc(c,new_file);
            c = fgetc(old_file);
      }
      from_file(leaders,"scores.dat");
      printf("%s\n%d",leaders[3].player,leaders[3].score);
fclose(old_file);
fclose(new_file);
}
void add_winner(leaderboard x,int* counter){
//append(x);
//from_file(leaders,"scores.dat");


strcpy(leaders[*counter].player,x.player);
leaders[*counter].score=x.score;
sorting(leaders,*counter);
search_n_replace(x);
(*counter)+=1;
printf("%d",*counter);
//to_file(leaders,current,"scores.dat");
print_leaderboard();
}
int main(){
//to_file(leaders,current,"scores.dat");
from_file(leaders,"scores.dat");
//print_leaderboard();
int c=3;
leaderboard z={"nour",180};
//append(z);
/*from_file(leaders,"scores.dat");
*/
add_winner(z,&c);
//int i;for(i=0;i<current;i++){printf("%s\t%d\n",leaders[i].player,leaders[i].score);}*/
//printf("%d",current);
return 0;
}
